
CREATE TABLE department (
    department_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    department_name varchar(200) DEFAULT NULL,
    CONSTRAINT pk_department PRIMARY KEY (department_id)
);

CREATE TABLE genre (
    genre_id INT NOT NULL,
    genre_name varchar(100) DEFAULT NULL,
    CONSTRAINT pk_genre PRIMARY KEY (genre_id)
);

CREATE TABLE language (
    language_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    language_code varchar(10) DEFAULT NULL,
    language_name varchar(500) DEFAULT NULL,
    CONSTRAINT pk_language PRIMARY KEY (language_id)
);

CREATE TABLE country (
    country_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    country_iso_code varchar(10) DEFAULT NULL,
    country_name varchar(200) DEFAULT NULL,
    CONSTRAINT pk_country PRIMARY KEY (country_id)
);

CREATE TABLE keyword (
    keyword_id INT NOT NULL,
    keyword_name varchar(100) DEFAULT NULL,
    CONSTRAINT pk_keyword PRIMARY KEY (keyword_id)
);

CREATE TABLE person (
    person_id INT NOT NULL,
    person_name varchar(500) DEFAULT NULL,
    CONSTRAINT pk_person PRIMARY KEY (person_id)
);

CREATE TABLE production_company (
    company_id INT NOT NULL,
    company_name varchar(200) DEFAULT NULL,
    CONSTRAINT pk_prodcomp PRIMARY KEY (company_id)
);

CREATE TABLE movie (
    movie_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    title varchar(1000) DEFAULT NULL,
    budget INT DEFAULT NULL,
    homepage varchar(1000) DEFAULT NULL,
    overview varchar(1000) DEFAULT NULL,
    popularity decimal(12, 6) DEFAULT NULL,
    release_date date DEFAULT NULL,
    revenue BIGINT DEFAULT NULL,
    runtime INT DEFAULT NULL,
    movie_status varchar(50) DEFAULT NULL,
    tagline varchar(1000) DEFAULT NULL,
    vote_average decimal(4, 2) DEFAULT NULL,
    vote_count INT DEFAULT NULL,
    CONSTRAINT pk_movie PRIMARY KEY (movie_id)
);

CREATE TABLE movie_cast (
    movie_id INT DEFAULT NULL,
    person_id INT DEFAULT NULL,
    character_name varchar(400) DEFAULT NULL,
    gender_id INT DEFAULT NULL,
    cast_order INT DEFAULT NULL,
    CONSTRAINT fk_mca_gender FOREIGN KEY (gender_id) REFERENCES gender (gender_id),
    CONSTRAINT fk_mca_movie FOREIGN KEY (movie_id) REFERENCES movie (movie_id),
    CONSTRAINT fk_mca_per FOREIGN KEY (person_id) REFERENCES person (person_id)
);

CREATE TABLE movie_company (
    movie_id INT DEFAULT NULL,
    company_id INT DEFAULT NULL,
    CONSTRAINT fk_mc_comp FOREIGN KEY (company_id) REFERENCES production_company (company_id),
    CONSTRAINT fk_mc_movie FOREIGN KEY (movie_id) REFERENCES movie (movie_id)
);

CREATE TABLE movie_crew (
    movie_id INT DEFAULT NULL,
    person_id INT DEFAULT NULL,
    department_id INT DEFAULT NULL,
    job varchar(200) DEFAULT NULL,
    CONSTRAINT fk_mcr_dept FOREIGN KEY (department_id) REFERENCES department (department_id),
    CONSTRAINT fk_mcr_movie FOREIGN KEY (movie_id) REFERENCES movie (movie_id),
    CONSTRAINT fk_mcr_per FOREIGN KEY (person_id) REFERENCES person (person_id)
);

CREATE TABLE movie_genres (
    movie_id INT DEFAULT NULL,
    genre_id INT DEFAULT NULL,
    CONSTRAINT fk_mg_genre FOREIGN KEY (genre_id) REFERENCES genre (genre_id),
    CONSTRAINT fk_mg_movie FOREIGN KEY (movie_id) REFERENCES movie (movie_id)
);

CREATE TABLE movie_keywords (
    movie_id INT DEFAULT NULL,
    keyword_id INT DEFAULT NULL,
    CONSTRAINT fk_mk_keyword FOREIGN KEY (keyword_id) REFERENCES keyword (keyword_id),
    CONSTRAINT fk_mk_movie FOREIGN KEY (movie_id) REFERENCES movie (movie_id)
);

CREATE TABLE movie_languages (
    movie_id INT DEFAULT NULL,
    language_id INT DEFAULT NULL,
    language_role_id INT DEFAULT NULL,
    CONSTRAINT fk_ml_lang FOREIGN KEY (language_id) REFERENCES language (language_id),
    CONSTRAINT fk_ml_movie FOREIGN KEY (movie_id) REFERENCES movie (movie_id),
    CONSTRAINT fk_ml_role FOREIGN KEY (language_role_id) REFERENCES language_role (role_id)
);

CREATE TABLE production_country (
    movie_id INT DEFAULT NULL,
    country_id INT DEFAULT NULL,
    CONSTRAINT fk_pc_country FOREIGN KEY (country_id) REFERENCES country (country_id),
    CONSTRAINT fk_pc_movie FOREIGN KEY (movie_id) REFERENCES movie (movie_id)
);
